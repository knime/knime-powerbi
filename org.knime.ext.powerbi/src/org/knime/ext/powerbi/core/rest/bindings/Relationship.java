/*
 * ------------------------------------------------------------------------
 *
 *  Copyright by KNIME AG, Zurich, Switzerland
 *  Website: http://www.knime.com; Email: contact@knime.com
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License, Version 3, as
 *  published by the Free Software Foundation.
 *
 *  This program is distributed in the hope that it will be useful, but
 *  WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, see <http://www.gnu.org/licenses>.
 *
 *  Additional permission under GNU GPL version 3 section 7:
 *
 *  KNIME interoperates with ECLIPSE solely via ECLIPSE's plug-in APIs.
 *  Hence, KNIME and ECLIPSE are both independent programs and are not
 *  derived from each other. Should, however, the interpretation of the
 *  GNU GPL Version 3 ("License") under any applicable laws result in
 *  KNIME and ECLIPSE being a combined program, KNIME AG herewith grants
 *  you the additional permission to use and propagate KNIME together with
 *  ECLIPSE with only the license terms in place for ECLIPSE applying to
 *  ECLIPSE and the GNU GPL Version 3 applying for KNIME, provided the
 *  license terms of ECLIPSE themselves allow for the respective use and
 *  propagation of ECLIPSE together with KNIME.
 *
 *  Additional permission relating to nodes for KNIME that extend the Node
 *  Extension (and in particular that are based on subclasses of NodeModel,
 *  NodeDialog, and NodeView) and that only interoperate with KNIME through
 *  standard APIs ("Nodes"):
 *  Nodes are deemed to be separate and independent programs and to not be
 *  covered works.  Notwithstanding anything to the contrary in the
 *  License, the License does not apply to Nodes, you are not required to
 *  license Nodes under the License, and you are granted a license to
 *  prepare and propagate Nodes, in each case even if such Nodes are
 *  propagated with or for interoperation with KNIME.  The owner of a Node
 *  may freely choose the license terms applicable to such Node, including
 *  when such Node is propagated with or for interoperation with KNIME.
 * ---------------------------------------------------------------------
 *
 * History
 *   Oct 9, 2019 (benjamin): created
 */
package org.knime.ext.powerbi.core.rest.bindings;

import java.util.Objects;

/**
 * A PowerBI relationship between columns in two different tables.
 *
 * @author Carl Witt, KNIME GmbH, Berlin, Germany
 */
public final class Relationship {

    /** The relationship identifier */
    private final String name; // NOSONAR the JSON key generated by GSON from this field is specified by the PowerBI API

    /** The name of the PowerBI relationship source table */
    private final String fromTable; // NOSONAR

    /** The name of the PowerBI relationship source table's column */
    private final String fromColumn; // NOSONAR

    /** The name of the PowerBI relationship target table */
    private final String toTable; // NOSONAR

    /** The name of the PowerBI relationship target table's column  */
    private final String toColumn; // NOSONAR

    /** The filter direction of the relationship */
    private final String crossFilteringBehavior; // NOSONAR

    /**
     * @param n
     * @param fT
     * @param fC
     * @param tT
     * @param tC
     * @param cFB
     */
    public Relationship(final String n, final String fT, final String fC, final String tT, final String tC,
        final String cFB) {
        this.name = n;
        this.fromTable = fT;
        this.fromColumn = fC;
        this.toTable = tT;
        this.toColumn = tC;
        this.crossFilteringBehavior = cFB;
    }

    /**
     * @return the name
     */
    public String getName() {
        return name;
    }

    /**
     * @return the fromTable
     */
    public String getFromTable() {
        return fromTable;
    }

    /**
     * @return the fromColumn
     */
    public String getFromColumn() {
        return fromColumn;
    }

    /**
     * @return the toTable
     */
    public String getToTable() {
        return toTable;
    }

    /**
     * @return the toColumn
     */
    public String getToColumn() {
        return toColumn;
    }

    /**
     * @return the crossFilteringBehavior
     */
    public String getCrossFilteringBehavior() {
        return crossFilteringBehavior;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public int hashCode() {
        return Objects.hash(crossFilteringBehavior, fromColumn, fromTable, name, toColumn, toTable);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        Relationship other = (Relationship)obj;
        return Objects.equals(crossFilteringBehavior, other.crossFilteringBehavior)
            && Objects.equals(fromColumn, other.fromColumn) && Objects.equals(fromTable, other.fromTable)
            && Objects.equals(name, other.name) && Objects.equals(toColumn, other.toColumn)
            && Objects.equals(toTable, other.toTable);
    }

}
